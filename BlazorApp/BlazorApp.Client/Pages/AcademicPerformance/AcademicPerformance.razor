@page "/academic-performance"
@using SMS.DataAccess.Data.Interfaces.AcademicPerformance
@using SMS.DataAccess.Models.AcademicPerformance.Request
@rendermode InteractiveWebAssembly

@inject IAcademicPerformance _academicPerformance
@inject ICommon _common

<div class="d-flex justify-content-between border-bottom border-4 border-secondary pb-1 mb-3">
    <h2 class="m-0">@PageHeading.AcademicPerformance</h2>
</div>

<div class="row align-items-end">
    <div class="col-sm-2 mb-3">
        <label>Class</label>
        <InputSelect class="form-select" aria-label="Default select example" @bind-Value="filters.ClassId" @bind-Value:after="GetDivisionData">
            <option selected disabled>select class</option>
            @if (classList.Any())
            {
                foreach (var classOption in classList)
                {
                    <option value="@classOption.Id">@classOption.Value</option>
                }
            }
        </InputSelect>
    </div>
    <div class="col-sm-2 mb-3">
        <label>Division</label>
        <InputSelect class="form-select" aria-label="Default select example" @bind-Value="filters.DivisionId">
            <option selected disabled>select Division</option>
            @if (divisionList.Any())
            {
                <option value="">All</option>
                foreach (var divisionOption in divisionList)
                {
                    <option value="@divisionOption.Id">@divisionOption.Value</option>
                }
            }
        </InputSelect>
    </div>
    <div class="col-sm mb-3">
        <Button class="p-3 py-0" Color="ButtonColor.Secondary" Size="ButtonSize.Large" Outline="true" @onclick="GetPerformanceDataOnSearch">
            Search
        </Button>
    </div>
</div>
<br />

<div class="d-flex justify-content-end">
    <em>
        <span class="fw-bold">*Note -</span>
        <span>all data is accurate based on academic progress</span>
    </em>
</div>
<br />

<div class="container">
    <div class="row">
        <div class="col-sm d-flex justify-content-center align-items-end">
            <BarChart @ref="barChart1" Width="650" Height="500" />
        </div>
        <div class="col-sm d-flex justify-content-center align-items-end">
            <BarChart @ref="barChart" Width="550" Height="400" />
        </div>
    </div>
</div>

@code {
    private BarChart barChart = default!;
    private BarChart barChart1 = default!;
    private BarChartOptions barChartOptions = default!;
    private BarChartOptions barChartOptions1 = default!;
    private ChartData chartData = default!;
    private ChartData chartData1 = default!;
    private List<SelectOptionDTO> classList = new List<SelectOptionDTO>();
    private List<SelectOptionDTO> divisionList = new List<SelectOptionDTO>();
    private PerformanceRequestDTO filters = new PerformanceRequestDTO();

    protected override async void OnInitialized()
    {
        chartData = chartData1 = new ChartData { Labels = new List<string>(), Datasets = new List<IChartDataset>() };
        barChartOptions = new BarChartOptions
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.Y },
                IndexAxis = "y"
            };
        barChartOptions1 = new BarChartOptions
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.Index },
            };

        barChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Percentage", Display = true, Font = new ChartFont { Size = ChartFile.fontScaleSize, Family = ChartFile.fontFamily } };
        barChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Exam Type", Display = true, Font = new ChartFont { Size = ChartFile.fontScaleSize, Family = ChartFile.fontFamily } };
        barChartOptions.Plugins.Title = new ChartPluginsTitle
            {
                Text = "Exam Wise Performance",
                Display = true,
                Color = ChartFile.fontHeadColor,
                Font = new ChartFont { Size = ChartFile.fontHeadingSize, Family = ChartFile.fontFamily }
            };
        barChartOptions.Plugins.Legend.Display = false;

        barChartOptions1.Scales.X!.Title = new ChartAxesTitle { Text = "Subject", Display = true, Font = new ChartFont { Size = ChartFile.fontScaleSize, Family = ChartFile.fontFamily } };
        barChartOptions1.Scales.Y!.Title = new ChartAxesTitle { Text = "Avg Percentage", Display = true, Font = new ChartFont { Size = ChartFile.fontScaleSize, Family = ChartFile.fontFamily } };
        barChartOptions1.Plugins.Title = new ChartPluginsTitle
            {
                Text = "Subject Wise Performance",
                Display = true,
                Color = ChartFile.fontHeadColor,
                Font = new ChartFont { Size = ChartFile.fontHeadingSize, Family = ChartFile.fontFamily }
            };
        barChartOptions1.Plugins.Legend.Display = false;

        var res = await _common.GetAllClassesAsync();
        if (res.Result)
        {
            classList = res.Data;
            filters.ClassId = classList.First().Id;
            await GetDivisionData();
        }
        StateHasChanged();

        await GetPerformanceDataOnSearch();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
            await barChart1.InitializeAsync(chartData1, barChartOptions1);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetDivisionData()
    {
        var divisionRes = await _common.GetDivisionsByClassAsync(filters.ClassId);
        if (divisionRes.Result)
        {
            divisionList = divisionRes.Data;
            filters.DivisionId = divisionList.First().Id;
        }
    }

    private async Task GetChartData()
    {
        var colors = ColorUtility.CategoricalTwelveColors;

        var examPerformanceRes = await _academicPerformance.GetExamBasePerformance(filters);
        if (examPerformanceRes.Result)
        {
            var examLabel = new List<string>();
            var examChartSet = new List<IChartDataset>();
            var datasetTemp = new BarChartDataset()
                {
                    Data = new List<double?>(),
                    BackgroundColor = new List<string> { colors[8], colors[4], colors[9], colors[10] },
                    BorderColor = new List<string> { colors[8], colors[4], colors[9], colors[10] },
                    BorderWidth = new List<double> { 0 },
                };

            examLabel.AddRange(examPerformanceRes.Data.Select(x => ((ExamType)int.Parse(x.Name)).GetDescription()));
            datasetTemp.Data.AddRange(examPerformanceRes.Data.Select(x => x.Value));
            examChartSet.Add(datasetTemp);
            chartData = new ChartData()
                {
                    Labels = examLabel,
                    Datasets = examChartSet,
                };
        }

        var subjectPerformanceRes = await _academicPerformance.GetSubjectBasePerformance(filters);
        if (subjectPerformanceRes.Result)
        {
            var subjectLabel = new List<string>();
            var subChartSet = new List<IChartDataset>();
            var datasetTemp = new BarChartDataset()
                {
                    Data = new List<double?>(),
                    BackgroundColor = new List<string> { colors[1] },
                    BorderColor = new List<string> { "#3b3b3b" },
                    BorderWidth = new List<double> { 0 },
                };
                  
            subjectLabel.AddRange(subjectPerformanceRes.Data.Select(x => x.Name));
            datasetTemp.Data.AddRange(subjectPerformanceRes.Data.Select(x => x.Value));
            datasetTemp.BackgroundColor.AddRange(subjectPerformanceRes.Data.Select((x, i) => colors[i % colors.Count()]));
            subChartSet.Add(datasetTemp);
            chartData1 = new ChartData()
                {
                    Labels = subjectLabel,
                    Datasets = subChartSet,
                };
        }
    }

    private async Task GetPerformanceDataOnSearch()
    {
        await GetChartData();
        await barChart.UpdateAsync(chartData, barChartOptions);
        await barChart1.UpdateAsync(chartData1, barChartOptions1);
    }
}
