@page "/floor"
@using SMS.DataAccess.Data.Interfaces.Floor
@using SMS.DataAccess.Models.Floor
@using System.Text.Json
@rendermode InteractiveWebAssembly

@inject ITokenService tokenService
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject IFloor _floor

<div class="d-flex justify-content-between border-bottom border-4 border-secondary pb-1 mb-3">
    <h2 class="m-0">@PageHeading.Floor</h2>
</div>

<ScriptLoader Async="true"
              Class="mt-4"
              ScriptId="script1"
              Source="https://unpkg.com/konva@9.3.20/konva.min.js" />

<div class="row">
    <div class="col-sm-2 mb-3">
        <label>Building</label>
        <InputSelect class="form-select" aria-label="Default select example" @bind-Value="filters.BuildingId" @bind-Value:after="GetFloorList">
            @if (buildingList.Any())
            {
                foreach (var buildingItem in buildingList)
                {
                    <option value="@buildingItem.Id">@buildingItem.Value</option>
                }
            }
        </InputSelect>
    </div>
    <div class="col-sm-2 mb-3">
        <label>Floor</label>
        <InputSelect class="form-select" aria-label="Default select example" @bind-Value="filters.FloorId" @bind-Value:after="GetRoomDataList">
            @if (floorList.Any())
            {
                foreach (var floorItem in floorList)
                {
                    <option value="@floorItem.Id">@floorItem.Value</option>
                }
            }
        </InputSelect>
    </div>
    @if (IsAdminOrSuperAdmin)
    {
        <div class="col-sm-2 mb-3">
            <label>Room</label>
            <InputSelect class="form-select" aria-label="Default select example" @bind-Value="filters.RoomId" @bind-Value:after="ChangeRoom">
                @if (roomDataList.Any())
                {
                    foreach (var roomItem in roomDataList.DistinctBy(x => x.RoomNumber))
                    {
                        <option value="@roomItem.RoomId">@roomItem.RoomNumber</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="col-sm mt-3">
        </div>
        <div class="col-sm mt-3">
            <button class="btn btn-primary mt-2" @onclick="RoomCell">Save</button>
            <button class="btn btn-primary mt-2" @onclick="FinalSubmit">Finalize</button>
        </div>
    }

</div>
<div class="d-flex">
    @foreach (var rooms in Enum.GetValues(typeof(RoomType)))
    {
        <p class="m-0 mx-1">
            <span class="px-2 mx-1" Style="background-color: @GetRoomColor((int)rooms);"></span>
            @((RoomType)rooms)
        </p>
    }
</div>

<br />

<div id="konva-wrapper" style="width: 100%; height: 650px; overflow: auto; border: 1px solid #ccc;">
    <div id="konva-container"></div>
</div>


@code {
    private JwtDTO tokenData = default!;
    private List<SelectOptionDTO> buildingList = new List<SelectOptionDTO>();
    private List<SelectOptionDTO> floorList = new List<SelectOptionDTO>();
    private List<RoomCoordinatesResponseDTO> roomDataList = new List<RoomCoordinatesResponseDTO>();
    private FloorFilterDTO filters = new FloorFilterDTO();
    private List<RoomDTO> Rooms = new List<RoomDTO>();
    private int? roomId;
    private List<RoomCell> RoomSource = new();
    private List<RoomCell> RoomsCell = new();
    private int MaxColumn = 80, MaxRow = 40, GridSize = 40;
    private bool IsAdminOrSuperAdmin = false;
    private int? selectedRoomId;
    private List<Cell> cells = new();

    protected override async Task OnInitializedAsync()
    {
        tokenData = tokenService.TokenData;
        if (tokenData == null && OperatingSystem.IsBrowser())
        {
            tokenData = await tokenService.GetClaimFromToken();
        }
        IsAdminOrSuperAdmin = tokenData?.Role is 1 or 2;
        await GetBuildingList();
        await GetFloorList();
    }

    private async Task GetBuildingList()
    {
        var res = await _floor.GetBuildingsList();
        if (res.Result)
        {
            buildingList = res.Data;
            filters.BuildingId = buildingList.First().Id;
        }
    }

    private async Task GetFloorList()
    {
        var res = await _floor.GetFloorsList(new FloorFilterDTO() { BuildingId = filters.BuildingId });
        if (res.Result)
        {
            floorList = res.Data;
            filters.FloorId = floorList.First().Id;
            await GetRoomDataList();
        }
    }

    private async Task GetRoomDataList()
    {
        var res = await _floor.GetRoomCellsListByFloorId(new FloorFilterDTO() { FloorId = filters.FloorId });
        roomDataList = new List<RoomCoordinatesResponseDTO>();
        Rooms = new List<RoomDTO>();
        if (res.Result && res.Data.Any())
        {
            RoomSource = res.Data.Where(r => !r.IsDeleted).Select(r => new RoomCell
                {
                    RoomId = r.RoomId,
                    CellX = r.CellX,
                    CellY = r.CellY
                }).ToList();

            roomDataList = res.Data;
            var allCoords = roomDataList.Where(rc => !rc.IsDeleted).ToList();
            var globalMinX = allCoords.Min(rc => rc.CellX);
            var globalMinY = allCoords.Min(rc => rc.CellY);
            var globalMaxX = allCoords.Max(rc => rc.CellX);
            var globalMaxY = allCoords.Max(rc => rc.CellY);
            int paddingX = 1;
            int paddingY = 1;

            var groupedRooms = allCoords.GroupBy(rc => rc.RoomId).ToList();

            foreach (var group in groupedRooms)
            {
                var room = res.Data.FirstOrDefault(r => r.RoomId == group.Key);
                var minX = group.Min(rc => rc.CellX);
                var maxX = group.Max(rc => rc.CellX);
                var minY = group.Min(rc => rc.CellY);
                var maxY = group.Max(rc => rc.CellY);
                var roomWidth = maxX - minX + 1;
                var roomHeight = maxY - minY + 1;
                var normalizedX = minX + paddingX;
                var normalizedY = minY + paddingY;
                Rooms.Add(new RoomDTO
                    {
                        RoomId = room.RoomId,
                        RoomNumber = room.RoomNumber,
                        Color = GetRoomColor(room.RoomType),
                        CellX = normalizedX,
                        CellY = normalizedY,
                        Width = roomWidth,
                        Height = roomHeight
                    });
            }
            filters.RoomId = Rooms.First().RoomId;
            await RenderFloorPlan();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("konvaInterop.initStage", "konva-container", MaxColumn * 20, MaxRow * 20);
            await JSRuntime.InvokeVoidAsync("konvaInterop.drawGridOnly", MaxColumn, MaxRow, GridSize);

        }
    }

    private string GetRoomColor(int roomType)
    {
        return (RoomType)roomType switch
        {
            RoomType.ClassRoom => "#F1EE8E",
            RoomType.ScienceLab => "#FFCBCD",
            RoomType.ComputerLab => "#BFE6FF",
            RoomType.Office => "#FEF8DD",
            RoomType.Library => "#ABF7B1",
            RoomType.Lobby => "#EFE5E5",
            RoomType.WashRoom => "#96B2BA",
            RoomType.BlockedArea => "#B9B0B0",
            _ => "#E5E4E2"
        };
    }

    private async Task ChangeRoom()
    {
        var prevRoomCells = RoomSource
                .Where(cell => cell.RoomId == roomId && cell.CellX > 0 && cell.CellY > 0)
                .ToList();

        roomId = filters.RoomId;
        Rooms.Clear();

        if (roomId.HasValue)
        {
            var roomCells = RoomSource
                .Where(cell => cell.RoomId == roomId.Value && cell.CellX > 0 && cell.CellY > 0)
                .ToList();

            if (roomCells.Any())
            {
                var minX = roomCells.Min(c => c.CellX);
                var maxX = roomCells.Max(c => c.CellX);
                var minY = roomCells.Min(c => c.CellY);
                var maxY = roomCells.Max(c => c.CellY);
                int paddingX = 1;
                int paddingY = 3;

                var room = roomDataList.FirstOrDefault(r => r.RoomId == roomId.Value);
                Rooms.Add(new RoomDTO
                    {
                        RoomId = room.RoomId,
                        RoomNumber = room.RoomNumber,
                        Color = GetRoomColor(room.RoomType),
                        CellX = minX + paddingX,
                        CellY = minY + paddingY,
                        Width = maxX - minX + 1,
                        Height = maxY - minY + 1
                    }
                );

                await JSRuntime.InvokeVoidAsync("clearSelection", prevRoomCells);
                await JSRuntime.InvokeVoidAsync("highlightCells", roomCells, Rooms.First().Color, filters.RoomId);
            }
        }
    }


    private async Task RenderFloorPlan()
    {
        var roomsData = roomDataList.Where(rc => !rc.IsDeleted).Select(group =>
            {
                var first = Rooms.First(x => x.RoomId == group.RoomId);
                return new
                {
                    RoomId = first.RoomId,
                    RoomNumber = first.RoomNumber,
                    Color = first.Color,
                    x = group.CellX,
                    y = group.CellY,
                    width = first.Width,
                    height = first.Height
                };
            }).OrderBy(x => x.RoomId).ThenBy(x => x.y).ThenBy(x => x.x).ToList();
        roomId = filters.RoomId;
        int canvasWidth = MaxColumn * 80;
        int canvasHeight = MaxRow * 80;

        var roomCells = RoomSource.Where(cell => cell.RoomId == roomId && cell.CellX > 0 && cell.CellY > 0).ToList();

        await JSRuntime.InvokeVoidAsync("konvaInterop.initStage", "konva-container", MaxColumn * 20, MaxRow * 20);
        await JSRuntime.InvokeVoidAsync("konvaInterop.drawRooms", roomsData, MaxColumn, MaxRow, GridSize);
        if (IsAdminOrSuperAdmin)
        {
            await JSRuntime.InvokeVoidAsync("highlightCells", roomCells, roomsData.First(x => x.RoomId == roomId).Color, roomId);
        }

    }

    private async Task RoomCell()
    {
        var originalRoomCells = roomDataList
        .Where(c => c.RoomId == roomId && c.CellX > 0 && c.CellY > 0 && !c.IsDeleted)
        .Select(c => new RoomsCellsViewModel
            {
                RoomCellId = c.RoomCellId,
                RoomId = c.RoomId,
                RoomType = c.RoomType,
                RoomNumber = c.RoomNumber,
                CellX = c.CellX,
                CellY = c.CellY,
                IsDeleted = false
            }).ToList();

        var selected = await JSRuntime.InvokeAsync<string[]>("getSelectedCells");
        var selectedSet = new HashSet<string>(selected); // for fast lookup

        var updatedList = new List<RoomsCellsViewModel>();

        // Deselect: mark original ones that are no longer selected
        foreach (var cell in originalRoomCells)
        {
            var key = $"{cell.CellX}_{cell.CellY}";
            if (!selectedSet.Contains(key))
            {
                cell.IsDeleted = true;
            }
            updatedList.Add(cell);
        }

        foreach (var key in selectedSet)
        {
            var parts = key.Split('_');
            int x = int.Parse(parts[0]);
            int y = int.Parse(parts[1]);

            var exists = originalRoomCells.Any(c => c.CellX == x && c.CellY == y);
            if (!exists)
            {
                updatedList.Add(new RoomsCellsViewModel
                    {
                        RoomId = roomId ?? 0,
                        RoomNumber = Rooms.FirstOrDefault()?.RoomNumber ?? "",
                        RoomType = Rooms.FirstOrDefault()?.RoomType ?? 0,
                        CellX = x,
                        CellY = y,
                        IsDeleted = false
                    });
            }
        }

        var res = await _floor.UpdateRoomCoordinate(updatedList);
        if (res.Result)
        {
            ToastService.ShowSuccess(res.Message);
            await GetRoomDataList();
        };
    }


    private async Task FinalSubmit()
    {
        if (filters.FloorId > 0)
        {
            var res = await _floor.FloorFinalize(filters.FloorId.Value);
            if (res.Result)
            {
                ToastService.ShowSuccess(res.Message);
            };
        }
    }

}



<script>
    let selectedCellIds = new Set();
    let allCells = {}; // To store all cells for lookup
    const cells = [];
    let selectColor = "";
    let selectedRoomId = 0;
    let roomCellMap = new Map(); // key: 'x_y', value: roomId

    window.konvaInterop = {
        initStage: function (containerId, width, height) {
            const stage = new Konva.Stage({
                container: containerId,
                width: width,
                height: height,
                draggable: false
            });
            const layer = new Konva.Layer();
            stage.add(layer);
            window.konvaLayer = layer;
            window.konvaStage = stage;
        },

        drawRooms: function (flatRoomCells, maxX, maxY, gridSize) {
            const allCellMap = new Map();

            const roomsById = {};
            roomCellMap.clear();

            flatRoomCells.forEach(cell => {
                const key = cell.roomId;
                const cellKey = `${cell.x}_${cell.y}`;
                allCellMap.set(cellKey, cell.roomId);
                roomCellMap.set(cellKey, cell.roomId);

                if (!roomsById[key]) {
                    roomsById[key] = {
                        RoomId: cell.roomId,
                        RoomNumber: cell.roomNumber,
                        Color: cell.color,
                        Cells: []
                    };
                }
                roomsById[key].Cells.push({ cellX: cell.x, cellY: cell.y });
            });

            drawGrid(maxX, maxY, gridSize);

            Object.values(roomsById).forEach(room => {
                let pathData = '';

                room.Cells.forEach(cell => {
                    const x = cell.cellX;
                    const y = cell.cellY;

                    const left = (x - 1) * gridSize;
                    const top = (y - 1) * gridSize;
                    const cellKey = `${x}_${y}`;
                    const rect = new Konva.Rect({
                        x: left,
                        y: top,
                        width: gridSize,
                        height: gridSize,
                        fill: room.Color,
                        opacity: 0.9,
                        cornerRadius: 2,
                        listening: true,
                        id: cellKey,
                        name: `xy_${room.RoomId}`
                    });

                    rect.on('click', () => {
                        handleCellClick(x, y, cellKey, rect, room.Color);
                    });

                    window.konvaLayer.add(rect);
                });

                room.Cells.forEach(cell => {
                    const x = cell.cellX;
                    const y = cell.cellY;

                    const left = (x - 1) * gridSize;
                    const top = (y - 1) * gridSize;
                    const right = x * gridSize;
                    const bottom = y * gridSize;

                    const topKey = `${x}_${y - 1}`;
                    const bottomKey = `${x}_${y + 1}`;
                    const leftKey = `${x - 1}_${y}`;
                    const rightKey = `${x + 1}_${y}`;

                    if (allCellMap.get(leftKey) !== room.RoomId) {
                        pathData += `M${left},${top} L${left},${bottom} `;
                    }
                    if (allCellMap.get(rightKey) !== room.RoomId) {
                        pathData += `M${right},${top} L${right},${bottom} `;
                    }
                    if (allCellMap.get(topKey) !== room.RoomId) {
                        pathData += `M${left},${top} L${right},${top} `;
                    }
                    if (allCellMap.get(bottomKey) !== room.RoomId) {
                        pathData += `M${left},${bottom} L${right},${bottom} `;
                    }
                });

                if (pathData.trim() !== '') {
                    const borderPath = new Konva.Path({
                        data: pathData,
                        stroke: 'black',
                        strokeWidth: 2,
                        listening: false
                    });
                    window.konvaLayer.add(borderPath);
                }

                if (room.Cells.length > 0) {
                    const firstCell = room.Cells[0];
                    const label = new Konva.Text({
                        x: (firstCell.cellX - 1) * gridSize + 5,
                        y: (firstCell.cellY - 1) * gridSize + 5,
                        text: room.RoomNumber,
                        fontSize: 14,
                        fill: 'black'
                    });
                    window.konvaLayer.add(label);
                }
            });

            window.konvaLayer.draw();
        },

        drawGridOnly: function (columns, rows, gridSize) {
            for (let y = 1; y <= rows; y++) {
                for (let x = 1; x <= columns; x++) {
                    const cellKey = `${x}_${y}`;
                    const rect = new Konva.Rect({
                        x: (x - 1) * gridSize,
                        y: (y - 1) * gridSize,
                        width: gridSize,
                        height: gridSize,
                        stroke: '#ddd',
                        strokeWidth: 1,
                        fill: '#ffffff',
                        id: cellKey,
                        listening: true
                    });

                    rect.on('click', () => {
                    });

                    window.konvaLayer.add(rect);
                }
            }

            window.konvaLayer.draw();
        },
    };


    function handleCellClick(x, y, cellKey, rect) {
        const isSelected = selectedCellIds.has(cellKey);
        console.log(`key00 : ${x}_${y}`);
        if (isSelected) {
            if (canDeselectCell(x, y)) {
                selectedCellIds.delete(cellKey);
                rect.fill('#ffffff'); // unselected
            } else {
                // alert(`Cannot deselect – would split the room.`);
            }
        } else {
            if (canSelectCell(x, y)) {
                selectedCellIds.add(cellKey);
                if(selectColor){
                    rect.fill(selectColor);
                }
            } else {
                // alert(`Invalid (${x}, ${y})`);
            }
        }

        window.konvaLayer.batchDraw();
    }


    function drawGrid(maxX, maxY, gridSize) {
        for (let y = 1; y <= maxY; y++) {
            for (let x = 1; x <= maxX; x++) {
                const cellKey = `${x}_${y}`;
                const rect = new Konva.Rect({
                    x: (x - 1) * gridSize,
                    y: (y - 1) * gridSize,
                    width: gridSize,
                    height: gridSize,
                    stroke: '#ddd',
                    strokeWidth: 1,
                    fill: '#ffffff',
                    id: cellKey,
                    name: 'grid-cell',
                    listening: true
                });

                rect.on('click', () => {
                    handleCellClick(x, y, cellKey, rect, '#ffffff');
                });

                window.konvaLayer.add(rect);
            }
        }
    }

    function canSelectCell(x, y) {
        const key = `${x}_${y}`;

        // Prevent overlapping with other rooms
        if (roomCellMap.has(key) && roomCellMap.get(key) !== selectedRoomId) {
            return false;
        }

        // Allow if already selected
        if (selectedCellIds.has(key)) return true;

        const offsets = [
            { dx: -1, dy: 0 },
            { dx: 1, dy: 0 },
            { dx: 0, dy: -1 },
            { dx: 0, dy: 1 }
        ];
        for (const offset of offsets) {
            const neighborKey = `${x + offset.dx}_${y + offset.dy}`;
            if (selectedCellIds.has(neighborKey)) {
                return true;
            }
        }

        // Allow if no cells selected yet (first selection)
        return selectedCellIds.size === 0;
    }


    function canDeselectCell(x, y) {
        const tempSet = new Set(selectedCellIds);
        const removeKey = `${x}_${y}`;
        tempSet.delete(removeKey);

        if (tempSet.size === 0) return true;

        const visited = new Set();
        const startKey = Array.from(tempSet)[0];
        const [startX, startY] = startKey.split('_').map(Number);

        dfs(startX, startY, visited, tempSet);

        return visited.size === tempSet.size;
    }

    function dfs(x, y, visited, validSet) {
        const key = `${x}_${y}`;
        if (visited.has(key) || !validSet.has(key)) return;

        visited.add(key);

        const offsets = [
            { dx: -1, dy: 0 },
            { dx: 1, dy: 0 },
            { dx: 0, dy: -1 },
            { dx: 0, dy: 1 }
        ];

        for (const offset of offsets) {
            dfs(x + offset.dx, y + offset.dy, visited, validSet);
        }
    }


    window.clearSelection = function (roomCells) {
        selectedCellIds.clear();

        window.konvaLayer.find('.grid-cell').forEach(rect => {
            const cellKey = rect.id();
            rect.stroke('#ddd');
            rect.strokeWidth(1);
            rect.fill('#ffffff');
        });

        roomCells.forEach(cell => {
            const roomName = `.xy_${cell.roomId}`;
            window.konvaLayer.find(roomName).forEach(rect => {
                const cellKey = rect.id();
                rect.opacity(0.9);
                rect.fill(selectColor);
            });
        });

        window.konvaLayer.batchDraw();
    };


    window.highlightCells = function (roomCells, color, roomId) {
        selectedCellIds.clear();
        selectedRoomId = roomId;
        selectColor = color;

        roomCells.forEach(cell => {
            const cellKey = `${cell.cellX}_${cell.cellY}`;
            const rect = window.konvaLayer.findOne(`#${cellKey}`);

            if (rect) {
                rect.stroke('black');
                rect.strokeWidth(1);
            }
            selectedCellIds.add(cellKey);
        });

        window.konvaLayer.batchDraw();
    };


    window.getSelectedCells = () => {
        return Array.from(selectedCellIds);
    };
</script>
