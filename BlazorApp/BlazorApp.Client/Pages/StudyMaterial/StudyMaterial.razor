@page "/study-material"
@using SMS.DataAccess.Data.Interfaces.StudyMaterial
@using SMS.DataAccess.Models.StudyMaterial
@rendermode InteractiveWebAssembly

@inject ITokenService tokenService
@inject IToastService ToastService
@inject ICommon _common
@inject IStudyMaterial _studyMaterial
@inject IJSRuntime JSRuntime
@inject ModalService ModalService

<div class="d-flex justify-content-between border-bottom border-4 border-secondary pb-1 mb-3">
    <h2 class="m-0">Study Material</h2>
    @if (roleType == Roles.SuperAdmin || roleType == Roles.Admin || roleType == Roles.Teacher)
    {
        <Button class="p-3 py-0" Color="ButtonColor.Secondary" Size="ButtonSize.Large" @onclick="AddMaterialClick">
            <Icon Name="IconName.Plus" /> New Material
        </Button>
    }
</div>

<div class="row align-items-end">
    @if (roleType == Roles.SuperAdmin || roleType == Roles.Admin || roleType == Roles.Teacher)
    {
        <div class="col-sm-2 mb-3">
            <label>@ResourcesManager.GetString(LanguageEnum.MultiLanguals.Class)</label>
            <InputSelect class="form-select" aria-label="Default select example" @bind-Value="filters.ClassId" @bind-Value:after="GetSubjectData">
                <option selected disabled>select class</option>
                @if (classList.Data != null)
                {
                    foreach (var classOption in classList.Data)
                    {
                        <option value="@classOption.Id">@classOption.Value</option>
                    }
                }
            </InputSelect>
        </div>
    }
    <div class="col-sm-2 mb-3">
        <label>@ResourcesManager.GetString(LanguageEnum.MultiLanguals.Subject)</label>
        <InputSelect class="form-select" aria-label="Default select example" @bind-Value="filters.SubjectId">
            <option selected disabled>select division</option>
            @if (subjectList.Data != null)
            {
                foreach (var subjectOption in subjectList.Data)
                {
                    <option value="@subjectOption.Id">@subjectOption.Value</option>
                }
            }
        </InputSelect>
    </div>
    <div class="col-sm-2 mb-3">
        <label>@ResourcesManager.GetString(LanguageEnum.MultiLanguals.FileName)</label>
        <TextInput @bind-Value="@filters.Name" Placeholder="Search file.." />
    </div>
    <div class="col-sm mb-3">
        <Button class="p-3 py-0" Color="ButtonColor.Secondary" Size="ButtonSize.Large" Outline="true" @onclick="GetMaterialDataOnSearch">
            @ResourcesManager.GetString(LanguageEnum.MultiLanguals.Search)
        </Button>
        <Button class="p-3 py-0" Color="ButtonColor.Secondary" Size="ButtonSize.Large" Outline="true" @onclick="GetMaterialDataOnClear">
            @ResourcesManager.GetString(LanguageEnum.MultiLanguals.Clear)
        </Button>
    </div>
</div>

<Grid @ref="grid"
      TItem="StudyMaterialResponceDTO"
      Class="table table-hover table-bordered"
      Data="result"
      FixedHeader="true"
      Height="700"
      Responsive="true"
      Unit="Unit.Px">

    <GridColumns>
        <GridColumn TItem="StudyMaterialResponceDTO" HeaderText="@ResourcesManager.GetString(LanguageEnum.MultiLanguals.FileFolderName)" PropertyName="fileName">
            <span class="d-block w-100" style="cursor: pointer;" @onclick="async () => await OpenFolder(context.studyMaterialId, context.parentMaterialId, context.materialType)">
                @if (string.IsNullOrEmpty(context.materialType))
                {
                    <span class="bi bi-folder-fill px-1"></span>
                }
                else
                {
                    <span class="bi bi-file-earmark-fill px-1"></span>
                }
                @if (context.fileName?.Length > 25)
                {
                    @string.Concat(context.fileName.Substring(0, 25), "..")
                }
                else
                {
                    @context.fileName?.ToString()
                }
            </span>
        </GridColumn>
        <GridColumn TItem="StudyMaterialResponceDTO" HeaderText="@ResourcesManager.GetString(LanguageEnum.MultiLanguals.Description)" PropertyName="description">
            @if (context.description?.Length > 20)
            {
                @string.Concat(context.description.Substring(0, 20), "..")
            }
            else
            {
                @context.description
            }
        </GridColumn>
        <GridColumn TItem="StudyMaterialResponceDTO"
                    HeaderText="@ResourcesManager.GetString(LanguageEnum.MultiLanguals.Size)" PropertyName="Designation"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @{
                string sizeType = FileSize.kb.GetDescription();
                decimal size;
                size = (decimal)context.materialSize / 1024;
                if (size > 1024)
                {
                    size = (decimal)context.materialSize / 1024;
                    sizeType = FileSize.mb.GetDescription();
                }
                if (size > 1024)
                {
                    size = (decimal)context.materialSize / 1024;
                    sizeType = FileSize.gb.GetDescription();
                }
            }
            @if (size != 0)
            {
                <span>
                    @Math.Round(size, 2) @sizeType
                </span>
            }
        </GridColumn>
        <GridColumn TItem="StudyMaterialResponceDTO"
                    HeaderText="@ResourcesManager.GetString(LanguageEnum.MultiLanguals.UploadedDate)" PropertyName="uploadedDate"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @context.uploadedDate.Date.ToString(DateFormat.ddMMMyyyy)
        </GridColumn>
        <GridColumn TItem="StudyMaterialResponceDTO"
                    HeaderText="@ResourcesManager.GetString(LanguageEnum.MultiLanguals.UploadedBy)" PropertyName="uploadedBy"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @context.uploadedBy
        </GridColumn>
        <GridColumn TItem="StudyMaterialResponceDTO" class="p-0 pt-1"
                    HeaderText="@ResourcesManager.GetString(LanguageEnum.MultiLanguals.Action)" PropertyName="Download"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @if ((context.studyMaterialId != filters.ParentMaterialId) && (context.parentMaterialId >= 0))
            {
                @if (roleType == Roles.SuperAdmin || roleType == Roles.Admin || roleType == Roles.Teacher)
                {
                    @* <Button Color="ButtonColor.None" TooltipTitle="Edit" Class="py-1"
                            @onclick="async () => await EditMaterial(context.studyMaterialId)">
                        <Icon Name="IconName.PenFill" Color="IconColor.Primary"></Icon>
                    </Button> *@
                }
                <Button Color="ButtonColor.None" TooltipTitle="Download" Class="py-1"
                        @onclick="async () => await DownloadMaterial(context.studyMaterialId, context.fileName, context.materialType)">
                    <Icon Name="IconName.CloudArrowDownFill" Color="IconColor.Warning"></Icon>
                </Button>
                @if (roleType == Roles.SuperAdmin || roleType == Roles.Admin || roleType == Roles.Teacher)
                {
                    <Button Color="ButtonColor.None" TooltipTitle="Delete" Class="py-1"
                            @onclick="async () => await DeleteMaterial(context.studyMaterialId, context.fileName, context.materialType)">
                        <Icon Name="IconName.Trash2Fill" Color="IconColor.Danger"></Icon>
                    </Button>
                }
            }
        </GridColumn>
    </GridColumns>
</Grid>

<Modal @ref="modal" IsVerticallyCentered="true" />


@code {
    private JwtDTO tokenData = default!;
    private Grid<StudyMaterialResponceDTO> grid = default!;
    private Modal modal = default!;
    private Roles roleType;
    private StudyMaterialFilterDTO filters = new StudyMaterialFilterDTO();
    private List<StudyMaterialResponceDTO> result = new List<StudyMaterialResponceDTO>();
    private HttpResponseDTO<List<SelectOptionDTO>> classList = new HttpResponseDTO<List<SelectOptionDTO>>();
    private HttpResponseDTO<List<SelectOptionDTO>> subjectList = new HttpResponseDTO<List<SelectOptionDTO>>();
    private StudyMaterialFileDownloadDTO fileDownload = new StudyMaterialFileDownloadDTO();
    private DeleteMaterialReq deleteMaterial = new DeleteMaterialReq();


    protected override async Task OnInitializedAsync()
    {
        tokenData = tokenService.TokenData;
        if (tokenData == null && OperatingSystem.IsBrowser())
        {
            tokenData = await tokenService.GetClaimFromToken();
        }
        if (tokenData != null)
        {
            filters.YearId = tokenData.CurrentYearId;
            filters.RoleId = tokenData.Role;
            roleType = (Roles)filters.RoleId;
            await GetAllClasses();
            await GetSubjectData();
            await GetMaterialData();
        }
    }

    private async Task GetAllClasses()
    {
        switch (roleType)
        {
            case Roles.SuperAdmin:
            case Roles.Admin:
                classList = await _common.GetAllClassesAsync();
                break;
            case Roles.Teacher:
                classList = await _common.GetClassesByTeacherIdAsync(tokenData.StaffId, tokenData.CurrentYearId);
                break;
            case Roles.Student:
                return;
        }
        filters.ClassId = classList.Data[0].Id;
    }


    private async Task GetSubjectData()
    {
        switch (roleType)
        {
            case Roles.SuperAdmin:
            case Roles.Admin:
                subjectList = await _common.GetSubjectByClassAsync(filters.ClassId, filters.YearId);
                break;
            case Roles.Teacher:
                subjectList = await _common.GetSubjectsByTeacherClassDivisionAsync(filters.ClassId, tokenData.StaffId, tokenData.CurrentYearId);
                break;
            case Roles.Student:
                subjectList = await _common.GetSubjectsByStudentAsync(tokenData.StudentId, tokenData.CurrentYearId);
                break;
        }
        filters.SubjectId = subjectList.Data[0].Id;
    }

    private async Task GetMaterialData()
    {
        var response = await _studyMaterial.GetStudyMaterialAsync(filters);
        if (response.Result)
        {
            result = response.Data;
        }
    }

    public async Task GetMaterialDataOnSearch()
    {
        filters.ParentMaterialId = null;
        await GetMaterialData();
    }

    public async Task GetMaterialDataOnClear()
    {
        if (classList.Data.Any())
        {
            filters.ClassId = classList.Data[0].Id;
            await GetSubjectData();
            filters.SubjectId = subjectList.Data[0].Id;
            filters.Name = string.Empty;
            filters.ParentMaterialId = null;
            await GetMaterialData();
        }
    }

    private async Task OpenFolder(int materialId, int parentMaterialId, string? materialType)
    {
        if (string.IsNullOrEmpty(materialType))
        {
            if (materialId == filters.ParentMaterialId && parentMaterialId == 0)
            {
                filters.ParentMaterialId = null;
            }
            else if (materialId == filters.ParentMaterialId && parentMaterialId > 0)
            {
                filters.ParentMaterialId = parentMaterialId;
            }
            else
            {
                filters.ParentMaterialId = materialId;
            }
            await GetMaterialData();
        }

    }

    private async Task DownloadMaterial(int studyMaterialId, string fileName, string materialType)
    {
        ToastService.ShowInfo(SystemMessage.msgFileDownloadProcess);
        fileDownload = new StudyMaterialFileDownloadDTO
            {
                StudyMaterialId = studyMaterialId,
                roleId = tokenData.Role,
                subjectId = filters.SubjectId,
                isFolder = false,
            };
        if (string.IsNullOrEmpty(materialType))
        {
            fileDownload.isFolder = true;
            fileName = string.Concat(fileName, FileType.zip.GetDescription());
        }
        byte[] fileContent = await _studyMaterial.DownloadMaterial(fileDownload);
        await JSRuntime.InvokeVoidAsync(JsStaticFun.downloadFileStream, fileName, _common.GetStreamContent(fileContent));
        ToastService.ShowSuccess(SystemMessage.msgFileDownloadComplete);
    }

    private async Task EditMaterial(int studyMaterialId)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("id", new List<int>() { filters.ClassId, filters.SubjectId });
        parameters.Add("studyMaterialId", studyMaterialId);
        parameters.Add("parentMaterialId", filters.ParentMaterialId);
        parameters.Add("userId", tokenData.UserId);
        parameters.Add("OnCloseClick", EventCallback.Factory.Create<MouseEventArgs>(this, ModelClosed));
        parameters.Add("DataUpdate", EventCallback.Factory.Create<MouseEventArgs>(this, DataUpdateCall));
        await modal.ShowAsync<_NewMaterial>(title: "Update File/Folder", parameters: parameters);
    }

    private async Task DeleteMaterial(int studyMaterialId, string fileName, string materialType)
    {
        deleteMaterial = new DeleteMaterialReq()
            {
                StudyMaterialId = studyMaterialId,
                UserId = tokenData.UserId,
                Name = fileName,
                ClassId = filters.ClassId,
                SubjectId = filters.SubjectId,
                IsFolder = string.IsNullOrEmpty(materialType) ? true : false
            };
        var res = await _studyMaterial.DeleteMaterial(deleteMaterial);
        if (res.Result && res.Data)
        {
            ToastService.ShowSuccess(res.Message);
            await GetMaterialData();
        }
        else
        {
            ToastService.ShowError(res.Message);
        }
    }

    public async Task AddMaterialClick()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("id", new List<int>() { filters.ClassId, filters.SubjectId });
        parameters.Add("parentMaterialId", filters.ParentMaterialId);
        parameters.Add("userId", tokenData.UserId);
        parameters.Add("OnCloseClick", EventCallback.Factory.Create<MouseEventArgs>(this, ModelClosed));
        parameters.Add("DataUpdate", EventCallback.Factory.Create<MouseEventArgs>(this, DataUpdateCall));
        await modal.ShowAsync<_NewMaterial>(title: "Add File/Folder", parameters: parameters);
    }

    private async Task DataUpdateCall()
    {
        await modal.HideAsync();
        await GetMaterialData();
    }

    private async Task ModelClosed(MouseEventArgs e)
    {
        await modal.HideAsync();
    }

}
