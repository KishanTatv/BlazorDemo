@using SMS.DataAccess.Data.Interfaces.Student
@using SMS.DataAccess.Models.Student.Response

@inject IStudent _student
@inject ITokenService tokenService
@inject IToastService ToastService

<div class="py-2 px-2">
    <div class="row">
        <div class="col-5 col-md-4 fw-bold">Student Name :</div>
        <div class="col-7 col-md-8">@Name?[0] @Name?[1]</div>
    </div>
    <div class="row">
        <div class="col-5 col-md-4 fw-bold">Class/Division :</div>
        <div class="col-7 col-md-8">@Standard?[0] / @Standard?[1]</div>
    </div>
</div>
<hr />
<div class="d-flex justify-content-end">
    <Button Class="mr-2" Color="ButtonColor.Secondary" @onclick="async () => await OnCloseClick.InvokeAsync()">Close</Button> &nbsp;
    <Button Color="ButtonColor.Danger" @onclick="DeleteClick"> Delete </Button>
</div>


@code{
    private StudentListDTO? studentInfo;
    [Parameter] public int StudentId { get; set; }
    [Parameter] public List<string> Name { get; set; }
    [Parameter] public List<string> Standard { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnCloseClick { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> DataUpdate { get; set; }
    private JwtDTO? tokenData;

    protected override async Task OnInitializedAsync()
    {
        tokenData = tokenService.TokenData;
        if (tokenData == null && OperatingSystem.IsBrowser())
        {
            tokenData = await tokenService.GetClaimFromToken();
        }
        base.OnInitialized();
    }

    protected async Task DeleteClick()
    {
        var res = await _student.DeleteStudent(StudentId, tokenData.UserId);
        if(res.Result){
            ToastService.ShowSuccess(res.Message);
            await DataUpdate.InvokeAsync();
            await OnCloseClick.InvokeAsync();
        }
        else{
            ToastService.ShowError(res.Message);
        }
    }   
}