@page "/student"
@page "/student/{id:int}"
@rendermode InteractiveWebAssembly
@using SMS.DataAccess.Data.Interfaces.Student
@using SMS.DataAccess.Models.Student.Request
@using SMS.DataAccess.Models.Student.Response

@inject IStudent _student;
@inject ITokenService tokenService;
@inject NavigationManager navigationManager;
<div class="d-flex justify-content-between border-bottom border-4 border-secondary pb-1 mb-3">
    <h2 class="m-0">Student</h2>
    <Button class="py-0" Color="ButtonColor.Secondary"  Size="ButtonSize.Large"  @onclick="AddStudentClick"> + Add </Button>
</div>

<div class="row mb-3">
    <div class="col-md-3">
        <TextInput @bind-Value="@studentReq.SearchByName" Placeholder="Enter first name " />
    </div>
    <div class="col-md-2">
        <Button class="p-3 py-0" Color="ButtonColor.Dark" Size="ButtonSize.Large" @onclick="GetStudentDataOnSearch"> Search </Button>
    </div>
</div>

<Grid @ref="studentGrid" TItem="StudentListDTO" AllowPaging="true" AllowSorting="true" PageSize="10"
FixedHeader="true"
Height="466"
PageSizeSelectorVisible="true"
PageSizeSelectorItems="@(new int[] { 5,10,20 })"
Responsive="true"
Class="table table-hover table-bordered thead-light"
DataProvider="StudentDataProvider">
    <GridColumns>
        <GridColumn TItem="StudentListDTO" HeaderText="Student Name" PropertyName="FirstName" SortString="FirstName" SortKeySelector="item => item.FirstName">@context.FirstName @context.LastName</GridColumn>
        <GridColumn TItem="StudentListDTO" HeaderText="Date Of Birth" PropertyName="DateOfBirth" SortString="DateOfBirth" SortKeySelector="item => item.DateOfBirth">@context.DateOfBirth.ToString(DateFormat.ddMMMyyyy)</GridColumn>
        <GridColumn TItem="StudentListDTO" HeaderText="Email" PropertyName="Email" SortString="Email" SortKeySelector="item => item.Email">@context.Email</GridColumn>
        <GridColumn TItem="StudentListDTO" HeaderText="Mobile" PropertyName="Mobile" SortString="Mobile" SortKeySelector="item => item.Mobile">@context.Mobile</GridColumn>
        <GridColumn TItem="StudentListDTO" HeaderText="Class / Division" PropertyName="ClassName" SortString="ClassName" SortKeySelector="item => item.ClassName">@context.ClassName / @context.DivisionName</GridColumn>
        <GridColumn TItem="StudentListDTO" HeaderText="Admission Date" PropertyName="AdmissionDate" SortString="AdmissionDate" SortKeySelector="item => item.AdmissionDate">@context.AdmissionDate.ToString(DateFormat.ddMMMyyyy)</GridColumn>
        <GridColumn TItem="StudentListDTO" HeaderText="Address" PropertyName="Address" SortString="State" SortKeySelector="item => item.State"> @context.City , @context.State</GridColumn>
    </GridColumns>
</Grid>

<p>@Id</p>

<Preload LoadingText="Loading..." />


@code {
    [Parameter] public int? Id { get; set; }
    private int currentPageNumber = 0;
    private JwtDTO? tokenData;
    private Grid<StudentListDTO> studentGrid;
    private StudentListReqDTO studentReq = new StudentListReqDTO()
        {
            YearId = 1,
            SortCol = "studentId",
            SortDir = "desc"
        };

    private HttpResponseDTO<StudentListResponceVM> studentData = new HttpResponseDTO<StudentListResponceVM>();

    protected override async Task OnInitializedAsync()
    {
        tokenData = tokenService.TokenData;
        if (tokenData == null && OperatingSystem.IsBrowser())
        {
            tokenData = await tokenService.GetClaimFromToken();
        }
    }

    private async Task<GridDataProviderResult<StudentListDTO>> StudentDataProvider(GridDataProviderRequest<StudentListDTO> request)
    {
        if(tokenData != null){
            studentReq.YearId = tokenData.CurrentYearId;
        }
        if (request.Sorting is not null && request.Sorting.Any())
        {
            studentReq.SortCol = request.Sorting.FirstOrDefault()!.SortString;
            studentReq.SortDir = request.Sorting.FirstOrDefault()!.SortDirection == SortDirection.Ascending ? "asc" : "desc";
        }
        studentReq.DisplayLength = request.PageSize;
        studentReq.DisplayStart = request.PageNumber - 1;

        await GetStudentData();

        if(studentData.Result)
        {
            return await Task.FromResult(new GridDataProviderResult<StudentListDTO>
                {
                    Data = studentData.Data.Students,
                    TotalCount = studentData.Data.TotalItemCount
                });
        }
        else{
            return await Task.FromResult(new GridDataProviderResult<StudentListDTO>
                {
                    Data = [],
                    TotalCount = 0
                });
        }
    }

    private async Task GetStudentData()
    {
        studentData = await _student.GetStudentList(studentReq);
    }

    private async Task GetStudentDataOnSearch(){
        await GetStudentData();
        await studentGrid.RefreshDataAsync();
    }


    private void AddStudentClick(){
        navigationManager.NavigateTo(Page_Routes.AddStudent);
    }
}
