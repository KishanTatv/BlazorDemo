@page "/student"
@rendermode InteractiveWebAssembly
@using SMS.DataAccess.Data.Interfaces.Student
@using SMS.DataAccess.Models.Student.Request
@using SMS.DataAccess.Models.Student.Response

@inject IStudent _student
@inject ITokenService tokenService
@inject NavigationManager navigationManager

<div class="d-flex justify-content-between border-bottom border-4 border-secondary pb-1 mb-3">
    <h2 class="m-0">@PageHeading.Student</h2>
    <Button class="p-3 py-0" Color="ButtonColor.Light" Size="ButtonSize.Large" @onclick="RouteToAlumni"> Alumni Student </Button>
</div>

<div class="row mb-3 align-items-center">
    <div class="col-md-3">
        <TextInput @bind-Value="@studentReq.SearchByName" Placeholder="Search here.." />
    </div>
    <div class="col-md-2">
        <Button class="p-3 py-0" Color="ButtonColor.Secondary" Size="ButtonSize.Large" Outline="true" @onclick="GetStudentDataOnSearch"> Search </Button>
    </div>
    <div class="col-md d-flex justify-content-end">
        <Button class="p-3 py-0" Color="ButtonColor.Secondary" Size="ButtonSize.Large" @onclick="AddStudentClick"> <Icon Name="IconName.Plus" /> Add </Button>
    </div>
</div>

<Grid @ref="studentGrid" TItem="StudentListDTO"
      AllowPaging="true" AllowSorting="true" PageSize="GridTable.PageSize"
      AllowRowClick="true"
      FixedHeader="true"
      Height="GridTable.FixHeight"
      Class="table table-hover table-bordered"
      DataProvider="StudentDataProvider"
      PageSizeSelectorVisible="true"
      PageSizeSelectorItems="GridTable.PageSizeOption"
      Responsive="true">
    <GridColumns>
        <GridColumn TItem="StudentListDTO"
                    HeaderText="Student Name" PropertyName="FirstName"
                    SortString="FirstName" SortKeySelector="item => item.FirstName"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @context.FirstName @context.LastName
        </GridColumn>
        <GridColumn TItem="StudentListDTO"
                    HeaderText="Date Of Birth" PropertyName="DateOfBirth"
                    SortString="DateOfBirth" SortKeySelector="item => item.DateOfBirth"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @context.DateOfBirth.ToString(DateFormat.ddMMMyyyy)
        </GridColumn>
        <GridColumn TItem="StudentListDTO"
                    HeaderText="Email" PropertyName="Email"
                    SortString="Email" SortKeySelector="item => item.Email"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @context.Email
        </GridColumn>
        <GridColumn TItem="StudentListDTO"
                    HeaderText="Mobile" PropertyName="Mobile"
                    SortString="Mobile" SortKeySelector="item => item.Mobile"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @context.Mobile
        </GridColumn>
        <GridColumn TItem="StudentListDTO"
                    HeaderText="Class / Division" PropertyName="ClassName"
                    SortString="ClassName" SortKeySelector="item => item.ClassName"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @context.ClassName / @context.DivisionName
        </GridColumn>
        <GridColumn TItem="StudentListDTO"
                    HeaderText="Admission Date" PropertyName="AdmissionDate"
                    SortString="AdmissionDate" SortKeySelector="item => item.AdmissionDate"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @context.AdmissionDate.ToString(DateFormat.ddMMMyyyy)
        </GridColumn>
        <GridColumn TItem="StudentListDTO"
                    HeaderText="Address" PropertyName="Address"
                    SortString="State" SortKeySelector="item => item.State"
                    HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
            @context.City , @context.State
        </GridColumn>
        @if (tokenData?.Role == 2)
        {
            <GridColumn TItem="StudentListDTO" HeaderText="Action" PropertyName="Action" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                <Button Class="py-1"
                        Type="ButtonType.Button" Color="ButtonColor.None"
                        TooltipTitle="Edit"
                        @onclick="() => EditAction(context.StudentId)">
                    <Icon Name="IconName.PenFill"></Icon>
                </Button>
                <Button Class="py-1"
                        Type="ButtonType.Button" Color="ButtonColor.None"
                        TooltipTitle="Leaving"
                        @onclick="() => LeaveAction(context.StudentId)">
                    <Icon Name="IconName.PersonFillDash"></Icon>
                </Button>
                <Button Class="py-1"
                        Type="ButtonType.Button" Color="ButtonColor.None"
                        TooltipTitle="Transfer"
                        @onclick="() => TransferAction(context.StudentId)">
                    <Icon Name="IconName.ListNested"></Icon>
                </Button>
                <Button Class="py-1"
                        Type="ButtonType.Button" Color="ButtonColor.None"
                        TooltipTitle="Delete"
                        @onclick="async () => await DeleteAction(context.StudentId)">
                    <Icon Name="IconName.TrashFill"></Icon>
                </Button>
            </GridColumn>
        }
    </GridColumns>
</Grid>

<Modal @ref="modal" IsVerticallyCentered="true" />


@code {
    [Inject] ModalService ModalService { get; set; } = default!;
    private Modal modal = default!;
    private JwtDTO? tokenData;
    private Grid<StudentListDTO> studentGrid = default!;
    private StudentListReqDTO studentReq = new StudentListReqDTO()
        {
            YearId = 1,
            SortCol = "studentId",
            SortDir = GridTable.SortDesc,
        };

    private HttpResponseDTO<StudentListResponceVM<StudentListDTO>> studentData = new HttpResponseDTO<StudentListResponceVM<StudentListDTO>>();

    protected override async Task OnInitializedAsync()
    {
        tokenData = tokenService.TokenData;
        if (tokenData == null && OperatingSystem.IsBrowser())
        {
            tokenData = await tokenService.GetClaimFromToken();
        }
    }

    private async Task<GridDataProviderResult<StudentListDTO>> StudentDataProvider(GridDataProviderRequest<StudentListDTO> request)
    {
        if (tokenData != null)
        {
            studentReq.YearId = tokenData.CurrentYearId;
            studentReq.StaffId = tokenData.StaffId;
        }
        if (request.Sorting is not null && request.Sorting.Any())
        {
            studentReq.SortCol = request.Sorting.FirstOrDefault()!.SortString;
            studentReq.SortDir = request.Sorting.FirstOrDefault()!.SortDirection == SortDirection.Ascending ? GridTable.SortAsc : GridTable.SortDesc;
        }
        studentReq.DisplayLength = request.PageSize;
        studentReq.DisplayStart = request.PageNumber - 1;

        await GetStudentData();

        if (studentData.Result)
        {
            return await Task.FromResult(new GridDataProviderResult<StudentListDTO>
                {
                    Data = studentData.Data.Students,
                    TotalCount = studentData.Data.TotalItemCount
                });
        }
        else
        {
            return await Task.FromResult(new GridDataProviderResult<StudentListDTO>
                {
                    Data = [],
                    TotalCount = 0
                });
        }
    }

    private async Task GetStudentData()
    {
        studentData = await _student.GetStudentList(studentReq);
    }

    private async Task GetStudentDataOnSearch()
    {
        await studentGrid.ResetPageNumber();
        // await GetStudentData();
        // await studentGrid.RefreshDataAsync();
    }

    private void AddStudentClick()
    {
        navigationManager.NavigateTo(Page_Routes.AddStudent);
    }

    private void RouteToAlumni()
    {
        navigationManager.NavigateTo(Page_Routes.AlumniStudent);
    }

    private void EditAction(int studentId)
    {
        navigationManager.NavigateTo(Page_Routes.AddStudent + "/" + studentId);
    }

    private async Task LeaveAction(int studentId)
    {
        var student = studentData.Data.Students.First(x => x.StudentId == studentId);
        var parameters = new Dictionary<string, object>();
        parameters.Add("StudentId", studentId);
        parameters.Add("userId", tokenData.UserId);
        parameters.Add("Name", new List<string>() { student.FirstName, student.LastName });
        parameters.Add("Standard", new List<string>() { student.ClassName, student.DivisionName });
        parameters.Add("OnCloseClick", EventCallback.Factory.Create<MouseEventArgs>(this, ModelClosed));
        parameters.Add("DataUpdate", EventCallback.Factory.Create<MouseEventArgs>(this, DataUpdateCall));
        await modal.ShowAsync<_LeaveStudent>(title: "School Leaving Process", parameters: parameters);
    }

    private async Task DeleteAction(int studentId)
    {
        var student = studentData.Data.Students.First(x => x.StudentId == studentId);
        var parameters = new Dictionary<string, object>();
        parameters.Add("StudentId", studentId);
        parameters.Add("Name", new List<string>() { student.FirstName, student.LastName });
        parameters.Add("Standard", new List<string>() { student.ClassName, student.DivisionName });
        parameters.Add("OnCloseClick", EventCallback.Factory.Create<MouseEventArgs>(this, ModelClosed));
        parameters.Add("DataUpdate", EventCallback.Factory.Create<MouseEventArgs>(this, DataUpdateCall));
        await modal.ShowAsync<_DeleteStudent>(title: "Delete Student", parameters: parameters);
    }

    private async Task TransferAction(int studentId)
    {
        var student = studentData.Data.Students.First(x => x.StudentId == studentId);
        var parameters = new Dictionary<string, object>();
        parameters.Add("StudentId", studentId);
        parameters.Add("Name", new List<string>() { student.FirstName, student.LastName });
        parameters.Add("Class", new KeyValuePair<int, string>(student.ClassId, student.ClassName));
        parameters.Add("Division", new KeyValuePair<int, string>(student.DivisionId, student.DivisionName));
        parameters.Add("OnCloseClick", EventCallback.Factory.Create<MouseEventArgs>(this, ModelClosed));
        parameters.Add("DataUpdate", EventCallback.Factory.Create<MouseEventArgs>(this, DataUpdateCall));
        await modal.ShowAsync<_TransferStudent>(title: "Transfer Student", parameters: parameters);
    }

    private async Task ModelClosed(MouseEventArgs e)
    {
        await modal.HideAsync();
    }

    private async Task DataUpdateCall()
    {
        await studentGrid.RefreshDataAsync();
    }
}
