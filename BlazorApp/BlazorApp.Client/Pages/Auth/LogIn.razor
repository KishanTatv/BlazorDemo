@page "/login"
@rendermode InteractiveWebAssembly
@layout Layout.EmptyLayout
@using BlazorApp.Data.Interfaces.Auth
@using Blazored.Toast.Configuration
@using Blazored.Toast.Services
@using Microsoft.AspNetCore.Components.Authorization
@using SMS.DataAccess.Models.Auth.Request
@using SMS.Shared.JWTToken


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuth _auth;
@inject NavigationManager _navigationManager;
@inject IToastService toastService
@inject ITokenService tokenService;


<div class="login-main-div position-relative vh-100 d-flex flex-column justify-content-center align-items-center">
    <div class="login-container w-25 w-md-50">

        <div class="logo-section text-center">
            <img src="Images/logo.png" alt="Logo" class="w-25 h-50" />
            <h1 class="fs-md">School Management System</h1>
        </div>

        <EditForm Model=@loginModel OnValidSubmit="LogInClick" FormName="loginForm">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="Name">Username</label>
                <InputText @bind-Value=loginModel.Username class="form-control" id="Username" />
                <ValidationMessage For="() => loginModel.Username" />
            </div>
            <div class="form-group">
                <label for="Age">Password</label>
                <PasswordInput @bind-Value=loginModel.Password class="form-control" id="password" />
                <ValidationMessage For=@(() => loginModel.Password) />
            </div>
            <br />
            <button type="submit" class="btn btn-primary w-100"> Log In </button>
        </EditForm>
    </div>

    <footer class="position-absolute bottom-0">
        <p>© TatvaSoft All rights reserved</p>
    </footer>


</div>

@code {
    private UserLoginDTO loginModel = new UserLoginDTO();


    private async Task LogInClick()
    {
        HttpResponseDTO<List<string>> res = await _auth.Login(loginModel);

        if (res.Result && res.Data != null)
        {
            toastService.ShowSuccess(res.Message);
            await tokenService.StoreTokensAsync(res.Data[0], res.Data[1]);

            var authStateProvider = (CustomAuthStateProvider)AuthenticationStateProvider;
            await authStateProvider.NotifyUserAuthentication();
            _navigationManager.NavigateTo(Page_Routes.Dashboard);
        }
        else
        {
            toastService.ShowError(res.Message);
        }
    }


}
