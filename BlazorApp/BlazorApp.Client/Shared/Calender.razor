﻿<div class="w-100 px-4 d-flex fw-bold my-2 py-2 justify-content-between align-items-center fs-4">
    <span>
        @if (IsShowChildContent)
        {
            @ChildContent
        }
        else
        {
            @if (IsWeekView)
            {
                @SelectedDate.ToString(DateFormat.ddMMMyyyy)
            }
            else
            {
                @MonthDate.ToString(DateFormat.MMMMyyyy)
            }
        }
    </span>
    <span>
        <i class="bi bi-chevron-left px-3" @onclick="async () => await ChangeDate(IsWeekView ?  MonthDate.AddDays(-(int)MonthDate.DayOfWeek).AddDays(-7) : MonthDate.AddMonths(-1))"></i>
        @if (IsShowChildContent)
        {
            <span class="fs-6">
                @if (IsWeekView)
                {
                    @SelectedDate.ToString(DateFormat.ddMMMyyyy)
                }
                else
                {
                    @MonthDate.ToString(DateFormat.MMMMyyyy)
                }
            </span>
        }
        <i class="bi bi-chevron-right px-3" @onclick="async () => await ChangeDate(IsWeekView ?  MonthDate.AddDays(-(int)MonthDate.DayOfWeek).AddDays(7) : MonthDate.AddMonths(1))"></i>
    </span>
</div>

<div class="w-100 px-4 text-center">
    <div class="d-flex justify-content-around">
        @for (int i = 0; i < 7; i++)
        {
            <div class="col my-2 py-2 rounded-circle fw-bold">@(Enum.GetNames(typeof(DayOfWeek))[i][0])</div>
        }
    </div>
    @if (IsWeekView)
    {
        <div class="d-flex justify-content-around">
            @for (int i = 0; i < 7; i++)
            {
                var tempIndex = i;
                <div @onclick="async () => {SelectedDate = MonthDate.AddDays(-(int)MonthDate.DayOfWeek).AddDays(tempIndex); await OnSelectedDateChange.InvokeAsync(SelectedDate);}" class="col bg-light @(SelectedDate ==  MonthDate.AddDays(-(int)MonthDate.DayOfWeek).AddDays(tempIndex) ? "border border-2 border-today" : "") d-flex align-items-center justify-content-center my-2 py-2 px-2 @((i == 0 || i == 6) ? "bg-lightgrey" : "") @(Data.FirstOrDefault(x => x.Key ==  MonthDate.AddDays(-(int)MonthDate.DayOfWeek).AddDays(i).Date).Value) rounded-circle" style="height: 45px; max-width: 45px;">
                    @MonthDate.AddDays(-(int)MonthDate.DayOfWeek).AddDays(i).Day
                </div>
            }
        </div>
    }
    else
    {
        @while (date <= DateTime.DaysInMonth(MonthDate.Year, MonthDate.Month))
        {
            <div class="d-flex justify-content-around">
                @for (int i = 0; i < 7; i++)
                {
                    <div class="col d-flex align-items-center justify-content-center my-2 py-2 px-2 @((i == 0 || i == 6) && date > 0 && date <= DateTime.DaysInMonth(MonthDate.Year, MonthDate.Month) ? "bg-lightgrey" : "") @(date <= DateTime.DaysInMonth(MonthDate.Year, MonthDate.Month) && date > 0 ? Data.FirstOrDefault(x => x.Key == new DateTime(MonthDate.Year, MonthDate.Month, date)).Value : "") rounded-circle" style="height: 45px; max-width: 45px;">
                        @(date <= DateTime.DaysInMonth(MonthDate.Year, MonthDate.Month) && date > 0 ? date.ToString() : "")
                    </div>
                    date++;
                }
            </div>
        }
    }
</div>


@code {
    [Parameter] public Dictionary<DateTime, object> Data { get; set; } = new Dictionary<DateTime, object>();
    [Parameter] public EventCallback<DateTime> OnDateChange { get; set; }
    [Parameter] public EventCallback<DateTime> OnSelectedDateChange { get; set; }
    [Parameter] public DateTime MonthDate { get; set; } = DateTime.Now;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool IsShowChildContent { get; set; } = false;
    [Parameter] public bool IsWeekView { get; set; } = false;
    private DateTime SelectedDate { get; set; }

    private int date = 0;

    protected override Task OnInitializedAsync()
    {
        if (IsWeekView)
        {
            SelectedDate = MonthDate;
            MonthDate = MonthDate.AddDays(-(int)MonthDate.DayOfWeek);
        }
        else
        {
            date = 1 - (int)new DateTime(MonthDate.Year, MonthDate.Month, 1).DayOfWeek;
        }
        return base.OnInitializedAsync();
    }

    private async Task ChangeDate(DateTime newDate)
    {
        if (IsWeekView)
        {
            MonthDate = newDate.AddDays(-(int)newDate.DayOfWeek);
            SelectedDate = MonthDate;
            await OnDateChange.InvokeAsync(MonthDate);
            await OnSelectedDateChange.InvokeAsync(SelectedDate);
        }
        else
        {
            MonthDate = newDate;
            date = 1 - (int)new DateTime(MonthDate.Year, MonthDate.Month, 1).DayOfWeek;
            await OnDateChange.InvokeAsync(MonthDate);
        }
    }

}
